// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Declarations: should compile a const with default value 1`] = `
" \`Const\` **stringConstWithDefaultValue**: \\"hello\\"

[partial: sources]"
`;

exports[`Declarations: should compile a let with default value 1`] = `
" **stringLetWithDefaultValue**: \`string\` = \`'hello'\`

[partial: sources]"
`;

exports[`Declarations: should compile an undefined declaration 1`] = `
" **undefinedNumberDeclaration**: \`number\`

[partial: sources]"
`;

exports[`Declarations: should compile any function type 1`] = `
" **AnyFunctionType**<\`A\`\\\\>: (...\`input\`: \`any\`[]) => \`A\`

#### Type parameters

| Name | Type |
| :------ | :------ |
| \`A\` | \`any\` |

#### Type declaration

(...\`input\`: \`any\`[]): \`A\`

##### Parameters]


| Name | Type |
| :------ | :------ |
| \`...input\` | \`any\`[] |


##### Returns

\`A\`

[partial: sources]"
`;

exports[`Declarations: should compile callable declaration 1`] = `
" **callableDeclaration**: \`Object\`

#### Call signature

(\`someArg\`: \`number\`): \`boolean\`

##### Parameters


| Name | Type |
| :------ | :------ |
| \`someArg\` | \`number\` |


##### Returns

\`boolean\`

#### Type declaration


| Name | Type |
| :------ | :------ |
| \`arg1\` | \`string\` |
| \`arg2\` | \`number\` |


[partial: sources]"
`;

exports[`Declarations: should compile declaration with accessors 1`] = `
" **getterAndSetter**: \`Object\`

#### Type declaration


| Name | Type |
| :------ | :------ |
| \`get getMe()\` | [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )<\`string\`\\\\> |
| \`set setMe(x:string)\` | \`void\` |


[partial: sources]"
`;

exports[`Declarations: should compile declaration with double underscores in name and value 1`] = `
" \`Const\` **\\\\_\\\\_DOUBLE\\\\_UNDERSCORES\\\\_DECLARATION\\\\_\\\\_**: typeof [\`__DOUBLE_UNDERSCORES_DECLARATION__\`](../modules.md#__double_underscores_declaration__)

[partial: sources]"
`;

exports[`Declarations: should compile enum declaration 1`] = `
" **Down** = 1

[partial: sources]"
`;

exports[`Declarations: should compile enum declaration with defaults 1`] = `
" **East** = \\"East\\"

[partial: sources]"
`;

exports[`Declarations: should compile function declaration 1`] = `
" **functionDeclaration**: 

[partial: sources]"
`;

exports[`Declarations: should compile indexable declaration 1`] = `
" **indexableDeclaration**: \`Object\`

context.indexSignaturePartial(typeDeclaration.indexSignature)

#### Type declaration


| Name | Type |
| :------ | :------ |
| \`arg1\` | \`string\` |


[partial: sources]"
`;

exports[`Declarations: should compile object literal cast as a const 1`] = `
" \`Const\` **objectLiteralAsConstDeclaration**: \`Object\`

Comments

**\`Param\`**

Comment for object.

**\`Param\`**

Comment for Prop1.

**\`Param\`**

Comment for Prop2.

#### Type declaration


| Name | Type |
| :------ | :------ |
| \`Prop1\` | \\"Prop1\\" |
| \`Prop2\` | \\"Prop2\\" |
| \`Prop3\` | \\"Prop3\\" |


[partial: sources]"
`;

exports[`Declarations: should compile object literal declaration 1`] = `
" \`Const\` **objectLiteralDeclaration**: \`Object\`

**\`Param\`**

description for valueX

**\`Param\`**

description for valueZ

**\`Param\`**

description for valueY

#### Type declaration


| Name | Type | Description |
| :------ | :------ | :------ |
| \`valueA\` | \`number\` | Comment for valueA |
| \`valueB\` | \`boolean\` | - |
| \`valueC\` | {} | - |
| \`valueX\` | { \`valueA\`: \`number\`[] ; \`valueZ\`: \`string\` = 'foo' } | Comment for valueX |
| \`valueX.valueA\` | \`number\`[] | - |
| \`valueX.valueZ\` | \`string\` | - |
| \`valueY\` | () => \`string\` | Comment for value Y |
| \`valueZ\` | \`string\` | Comment for valueZ |


[partial: sources]"
`;

exports[`Declarations: should compile type literal declaration 1`] = `
" **typeLiteralDeclaration**: \`Object\`

#### Type declaration


| Name | Type | Description |
| :------ | :------ | :------ |
| \`valueA?\` | \`number\` | Comments for valueA |
| \`valueB?\` | \`boolean\` | - |
| \`valueC\` | { \`[dataId: string]\`: \\"ok\\" \\\\| \\"ko\\";  } | - |
| \`valueX\` | { \`valueA\`: \`number\`[] ; \`valueY\`: (\`z\`: \`string\`) => { \`a\`: \`string\` ; \`b\`: \`string\`  } ; \`valueZ\`: \`string\`  } | Comment for valueX |
| \`valueX.valueA\` | \`number\`[] | - |
| \`valueX.valueY\` | (\`z\`: \`string\`) => { \`a\`: \`string\` ; \`b\`: \`string\`  } | - |
| \`valueX.valueZ\` | \`string\` | Nested comment for valueZ |
| \`valueY\` | () => \`string\` | - |
| \`valueZ\` | \`string\` | Comment for valueZ |


[partial: sources]"
`;
